@using System
@using System.Globalization
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.NodeJS
@using AutoRest.NodeJS.Model
@using AutoRest.NodeJS.vanilla.Templates
@inherits AutoRest.Core.Template<MethodJs>

@(Model.GenerateMethodDocumentation(MethodJs.MethodFlavor.HttpOperationResponse))
@(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration)) {
  let client = @(Model.ClientReference);
  let self = this;
  return new Promise((resolve, reject) => {
    self._@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclaration), (err, result, request, response) => {
      let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
      httpOperationResponse.body = result;
      if (err) { reject(err); }
      else { resolve(httpOperationResponse); }
      return;
    });
  });
}
@EmptyLine
@(Model.GenerateMethodDocumentation(MethodJs.MethodFlavor.Promise))
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallback(true))) {
  let client = @(Model.ClientReference);
  let self = this;
  if (!optionalCallback && typeof options === 'function') {
    optionalCallback = options;
    options = null;
  }
  if (!optionalCallback) {
    return new Promise((resolve, reject) => {
      self._@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclaration), (err, result, request, response) => {
        if (err) { reject(err); }
        else { resolve(result); }
        return;
      });
    });
  } else {
    return self._@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallback(true)));
  }
}
