@using System
@using AutoRest.NodeJS.Model
@inherits AutoRest.Core.Template<AutoRest.NodeJS.Model.CompositeTypeJs>
/*
@Header(" * ")
 */
@EmptyLine
'use strict';
@EmptyLine

@Model.GenerateModelImports(EmptyLine)

@{ 
    bool isInherited = Model.BaseModelType != null;
    bool hasSummary = !String.IsNullOrEmpty(Model.Summary);
    bool hasDocumentation = !String.IsNullOrEmpty(Model.Documentation);
    bool summaryOrDoc = hasSummary || hasDocumentation;
}
/**
    @if (summaryOrDoc)
    {
if (hasSummary)
{
    @WrapComment(" * ", "@summary " + Model.Summary)@:
 @: *
}
if (hasDocumentation)
{
   @WrapComment(" * ", Model.Documentation)@:
@: *
}
    }
    else
    {
@: * Class representing a @(Model.Name).
    }
@if (isInherited)
{
@: * @@extends models['@(Model.BaseModelType.Name)']
}
 */
@{
    if (isInherited)
    {
@:class @(Model.Name) extends models['@(Model.BaseModelType.Name)'] {
    }
    else
    {
@:class @(Model.Name) {
    }
    }
  /**
   * Create a @(Model.Name).
@foreach (var property in Model.DocumentationPropertyList)
{
    @CompositeTypeJs.ConstructPropertyDocumentation(
                      WrapComment("   * ", "@property {" + CompositeTypeJs.GetPropertyDocumentationType(property)
                                                     + "} " + CompositeTypeJs.GetPropertyDocumentationName(property)
                                                     + " " + CompositeTypeJs.GetPropertyDocumentationString(property)))
}
   */
@{
  @:constructor() {
    if (Model.BaseModelType != null)
    {
    @:super();
    }
  @:}
}
@EmptyLine
  /**
   * Defines the metadata of @Model.Name
   *
   * @@returns {object} metadata of @Model.Name
   *
   */
  mapper() {
    @(Model.ConstructModelMapper())
  }
}
@EmptyLine
module.exports = @(Model.Name);
