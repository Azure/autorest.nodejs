@using System
@inherits AutoRest.Core.Template<AutoRest.NodeJS.Model.CodeModelJs>
@Header("// ")
@EmptyLine
const resetColor = "\x1b[0m";
const brightColor = "\x1b[1m";
const highlightColor = "\x1b[31m";
@EmptyLine
try {
    const invisibleCharactersLength = resetColor.length + brightColor.length + highlightColor.length;
@EmptyLine
    const firstLine = `Active development of this SDK has been moved to ${highlightColor}@(Model.GetCorrespondingTypeScriptPackageName())${resetColor}${brightColor} package.`;
    const secondLine = "This package is in maintenance mode and will be deprecated in July 2018.";
    const thirdLine = "Visit https://aka.ms/azure-sdk-for-js-migration for more information.";
@EmptyLine
    const framePadding = 4;
    const adjustedFirstLineLength = firstLine.length - invisibleCharactersLength;
    const width = Math.max(adjustedFirstLineLength, secondLine.length, thirdLine.length) + framePadding;
    const getPaddingLength = (strLength) => width - strLength - framePadding;
@EmptyLine
    const firstLinePaddingLength = getPaddingLength(adjustedFirstLineLength);
    const secondLinePaddingLength = getPaddingLength(secondLine.length);
    const thirdLinePaddingLength = getPaddingLength(thirdLine.length);
    const line = "#".repeat(width);
@EmptyLine
    const formatTextLine = (text, padding) => `#${" ".repeat(Math.floor(padding / 2))} ${text} ${" ".repeat(Math.ceil(padding / 2))}#`;
@EmptyLine
    console.log(brightColor);
    console.log("\n" + line);
    console.log(formatTextLine(firstLine, firstLinePaddingLength));
    console.log(formatTextLine(secondLine, secondLinePaddingLength));
    console.log(formatTextLine(thirdLine, thirdLinePaddingLength));
    console.log(line + "\n");
    console.log(resetColor);
} catch (err) {
    // ignore
}
