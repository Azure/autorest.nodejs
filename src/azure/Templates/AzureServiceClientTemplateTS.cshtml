@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.NodeJS.vanilla.Templates
@using AutoRest.NodeJS.Azure.Model
@using AutoRest.NodeJS.azure.Templates
@inherits AutoRest.Core.Template<AutoRest.NodeJS.Azure.Model.CodeModelJsa>
/*
@Header(" * ")
 */
@EmptyLine
@Model.ConstructImportTS()
@Model.ConstructImportTSAzure()
@if (Model.MethodTemplateModels.Any())
{
@:import * as models from "./models";
}
@if (Model.MethodGroupModels.Any()) {
@:import * as operations from "./operations";
}
@EmptyLine
@{var requiredParameters = Model.Properties.Where(p => p.IsRequired && !p.IsConstant && string.IsNullOrEmpty(p.DefaultValue));}
@{var optionalParameters = Model.Properties.Where(p => (!p.IsRequired || p.IsRequired && !string.IsNullOrEmpty(p.DefaultValue)) && !p.IsConstant && !p.Name.EqualsIgnoreCase("apiVersion"));}
@{var clientOptionType = Model.shouldOptionsInterfaceBeDeclared ? Model.Name + "Options" : "AzureServiceClientOptions"; }
@if (Model.shouldOptionsInterfaceBeDeclared)
{
@:/**
 @:* @(Model.Name)Options for @(Model.Name).
 @:*/
@:declare interface @(Model.Name)Options extends AzureServiceClientOptions {
foreach (var param in optionalParameters)
{
  @:/**
   @:* @@property {@param.ModelType.Name.ToCamelCase()} [@param.Name] - @param.Documentation
   @:*/
  @:@param.Name?: @param.ModelType.TSType(false);
}
@:}
@EmptyLine
}
declare class @(Model.Name) extends AzureServiceClient {
  /**
   * Initializes a new instance of the @Model.Name class.
   * @@constructor
   *
   * @@class
@foreach (var param in requiredParameters)
{
   @:* @@param {@param.ModelType.Name.ToCamelCase()} @param.Name - @param.Documentation
   @:*
}
@if(!Model.IsCustomBaseUri)
{
   @:* @@param {string} [baseUri] - The base URI of the service.
   @:*
}
   * @@param {object} [options] - The parameter options
   *
   * @@param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @@param {object} [options.requestOptions] - Options for the underlying request object
   * {@@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @@param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
@foreach (var param in optionalParameters)
{
   @:* @@param {@param.ModelType.Name.ToCamelCase()} [options.@param.Name] - @param.Documentation
   @:*
}
   */
  constructor(@(!string.IsNullOrEmpty(Model.RequiredConstructorParametersTS) ? Model.RequiredConstructorParametersTS + ", " : "")options?: @clientOptionType);

@foreach (var property in Model.Properties)
{
  @EmptyLine
  @:@(property.Name): @(property.ModelType.TSType(false));
}
@EmptyLine
@if (Model.MethodGroupModels.Any())
{
  @:// Operation groups
foreach (var methodGroup in Model.MethodGroupModels)
{
  @:@(methodGroup.NameForProperty): operations.@(methodGroup.TypeName);
}
}
@foreach (var method in Model.MethodTemplateModels)
{
  @EmptyLine
  @:@(Include(new MethodTemplateTS(), method))
}
}
@EmptyLine
export = @(Model.Name);
