/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";

export default class AutoRestValidationTest extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the AutoRestValidationTest class.
   * @constructor
   *
   * @param {string} subscriptionId - Subscription ID.
   *
   * @param {string} apiVersion - Required string following pattern \d{2}-\d{2}-\d{4}
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(subscriptionId: string, apiVersion: string, baseUri?: string, options?: ServiceClientOptions);

  subscriptionId: string;

  apiVersion: string;


  /**
   * Validates input parameters on the method. See swagger for details.
   * @param {string} resourceGroupName Required string between 3 and 10 chars with pattern
   * [a-zA-Z0-9]+.
   * @param {number} id Required int multiple of 10 from 100 to 1000.
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  validationOfMethodParametersWithHttpOperationResponse(resourceGroupName: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Product>>;

  /**
   * Validates input parameters on the method. See swagger for details.
   * @param {string} resourceGroupName Required string between 3 and 10 chars with pattern
   * [a-zA-Z0-9]+.
   * @param {number} id Required int multiple of 10 from 100 to 1000.
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  validationOfMethodParameters(resourceGroupName: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Product>;
  validationOfMethodParameters(resourceGroupName: string, id: number, callback: ServiceCallback<models.Product>): void;
  validationOfMethodParameters(resourceGroupName: string, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Product>): void;


  /**
   * Validates body parameters on the method. See swagger for details.
   * @param {string} resourceGroupName Required string between 3 and 10 chars with pattern
   * [a-zA-Z0-9]+.
   * @param {number} id Required int multiple of 10 from 100 to 1000.
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.body]
   * @param {array} [options.body.displayNames] Non required array of unique items from 0 to 6
   * elements.
   * @param {number} [options.body.capacity] Non required int betwen 0 and 100 exclusive.
   * @param {string} [options.body.image] Image URL representing the product.
   * @param {object} options.body.child
   * @param {number} [options.body.child.count] Count
   * @param {string} [options.body.constStringAsEnum] Constant string as Enum. Possible values
   * include: 'constant_string_as_enum'
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  validationOfBodyWithHttpOperationResponse(resourceGroupName: string, id: number, options?: { body? : models.Product, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Product>>;

  /**
   * Validates body parameters on the method. See swagger for details.
   * @param {string} resourceGroupName Required string between 3 and 10 chars with pattern
   * [a-zA-Z0-9]+.
   * @param {number} id Required int multiple of 10 from 100 to 1000.
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.body]
   * @param {array} [options.body.displayNames] Non required array of unique items from 0 to 6
   * elements.
   * @param {number} [options.body.capacity] Non required int betwen 0 and 100 exclusive.
   * @param {string} [options.body.image] Image URL representing the product.
   * @param {object} options.body.child
   * @param {number} [options.body.child.count] Count
   * @param {string} [options.body.constStringAsEnum] Constant string as Enum. Possible values
   * include: 'constant_string_as_enum'
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  validationOfBody(resourceGroupName: string, id: number, options?: { body? : models.Product, customHeaders? : { [headerName: string]: string; } }): Promise<models.Product>;
  validationOfBody(resourceGroupName: string, id: number, callback: ServiceCallback<models.Product>): void;
  validationOfBody(resourceGroupName: string, id: number, options: { body? : models.Product, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Product>): void;


  /**
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getWithConstantInPathWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getWithConstantInPath(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  getWithConstantInPath(callback: ServiceCallback<void>): void;
  getWithConstantInPath(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.body]
   * @param {array} [options.body.displayNames] Non required array of unique items from 0 to 6
   * elements.
   * @param {number} [options.body.capacity] Non required int betwen 0 and 100 exclusive.
   * @param {string} [options.body.image] Image URL representing the product.
   * @param {object} options.body.child
   * @param {number} [options.body.child.count] Count
   * @param {string} [options.body.constStringAsEnum] Constant string as Enum. Possible values
   * include: 'constant_string_as_enum'
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  postWithConstantInBodyWithHttpOperationResponse(options?: { body? : models.Product, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Product>>;

  /**
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.body]
   * @param {array} [options.body.displayNames] Non required array of unique items from 0 to 6
   * elements.
   * @param {number} [options.body.capacity] Non required int betwen 0 and 100 exclusive.
   * @param {string} [options.body.image] Image URL representing the product.
   * @param {object} options.body.child
   * @param {number} [options.body.child.count] Count
   * @param {string} [options.body.constStringAsEnum] Constant string as Enum. Possible values
   * include: 'constant_string_as_enum'
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  postWithConstantInBody(options?: { body? : models.Product, customHeaders? : { [headerName: string]: string; } }): Promise<models.Product>;
  postWithConstantInBody(callback: ServiceCallback<models.Product>): void;
  postWithConstantInBody(options: { body? : models.Product, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Product>): void;
}

export { AutoRestValidationTest, models as AutoRestValidationTestModels };
