/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * Formdata
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestSwaggerBATFormDataService.
 */
export interface Formdata {


    /**
     * Upload file
     * @param {object} fileContent File to upload.
     * @param {string} fileName File name to upload. Name has to be spelled exactly as written here.
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    uploadFileWithHttpOperationResponse(fileContent: stream.Readable, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * Upload file
     * @param {object} fileContent File to upload.
     * @param {string} fileName File name to upload. Name has to be spelled exactly as written here.
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    uploadFile(fileContent: stream.Readable, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    uploadFile(fileContent: stream.Readable, fileName: string, callback: ServiceCallback<stream.Readable>): void;
    uploadFile(fileContent: stream.Readable, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * Upload file
     * @param {object} fileContent File to upload.
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    uploadFileViaBodyWithHttpOperationResponse(fileContent: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * Upload file
     * @param {object} fileContent File to upload.
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    uploadFileViaBody(fileContent: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    uploadFileViaBody(fileContent: stream.Readable, callback: ServiceCallback<stream.Readable>): void;
    uploadFileViaBody(fileContent: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
}
