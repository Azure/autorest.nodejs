/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Get a null array of string using the multi-array format
 * @param {object} [options] Optional Parameters.
 * @param {array} [options.arrayQuery] a null array of string using the multi-array format
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _arrayStringMultiNull(options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let arrayQuery = (options && options.arrayQuery !== undefined) ? options.arrayQuery : undefined;
  // Validate
  try {
    if (Array.isArray(arrayQuery)) {
      for (let i = 0; i < arrayQuery.length; i++) {
        if (arrayQuery[i] !== null && arrayQuery[i] !== undefined && typeof arrayQuery[i].valueOf() !== 'string') {
          throw new Error('arrayQuery[i] must be of type string.');
        }
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'queries/array/multi/string/null';
  let queryParameters = [];
  if (arrayQuery !== null && arrayQuery !== undefined) {
    if (arrayQuery.length == 0) {
      queryParameters.push('arrayQuery=' + encodeURIComponent(''));
    } else {
      for (let item of arrayQuery) {
        item = (item === null || item === undefined) ? '' : item;
        queryParameters.push('arrayQuery=' + encodeURIComponent('' + item));
      }
    }
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get an empty array [] of string using the multi-array format
 * @param {object} [options] Optional Parameters.
 * @param {array} [options.arrayQuery] an empty array [] of string using the multi-array format
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _arrayStringMultiEmpty(options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let arrayQuery = (options && options.arrayQuery !== undefined) ? options.arrayQuery : undefined;
  // Validate
  try {
    if (Array.isArray(arrayQuery)) {
      for (let i = 0; i < arrayQuery.length; i++) {
        if (arrayQuery[i] !== null && arrayQuery[i] !== undefined && typeof arrayQuery[i].valueOf() !== 'string') {
          throw new Error('arrayQuery[i] must be of type string.');
        }
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'queries/array/multi/string/empty';
  let queryParameters = [];
  if (arrayQuery !== null && arrayQuery !== undefined) {
    if (arrayQuery.length == 0) {
      queryParameters.push('arrayQuery=' + encodeURIComponent(''));
    } else {
      for (let item of arrayQuery) {
        item = (item === null || item === undefined) ? '' : item;
        queryParameters.push('arrayQuery=' + encodeURIComponent('' + item));
      }
    }
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
 * mult-array format
 * @param {object} [options] Optional Parameters.
 * @param {array} [options.arrayQuery] an array of string ['ArrayQuery1', 'begin!*'();:@
 * &=+$,/?#[]end' , null, ''] using the mult-array format
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _arrayStringMultiValid(options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let arrayQuery = (options && options.arrayQuery !== undefined) ? options.arrayQuery : undefined;
  // Validate
  try {
    if (Array.isArray(arrayQuery)) {
      for (let i = 0; i < arrayQuery.length; i++) {
        if (arrayQuery[i] !== null && arrayQuery[i] !== undefined && typeof arrayQuery[i].valueOf() !== 'string') {
          throw new Error('arrayQuery[i] must be of type string.');
        }
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'queries/array/multi/string/valid';
  let queryParameters = [];
  if (arrayQuery !== null && arrayQuery !== undefined) {
    if (arrayQuery.length == 0) {
      queryParameters.push('arrayQuery=' + encodeURIComponent(''));
    } else {
      for (let item of arrayQuery) {
        item = (item === null || item === undefined) ? '' : item;
        queryParameters.push('arrayQuery=' + encodeURIComponent('' + item));
      }
    }
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Queries. */
class Queries {
  /**
   * Create a Queries.
   * @param {AutoRestUrlMutliCollectionFormatTestService} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._arrayStringMultiNull = _arrayStringMultiNull;
    this._arrayStringMultiEmpty = _arrayStringMultiEmpty;
    this._arrayStringMultiValid = _arrayStringMultiValid;
  }

  /**
   * Get a null array of string using the multi-array format
   * @param {object} [options] Optional Parameters.
   * @param {array} [options.arrayQuery] a null array of string using the multi-array format
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  arrayStringMultiNullWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._arrayStringMultiNull(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get a null array of string using the multi-array format
   * @param {object} [options] Optional Parameters.
   * @param {array} [options.arrayQuery] a null array of string using the multi-array format
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  arrayStringMultiNull(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._arrayStringMultiNull(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._arrayStringMultiNull(options, optionalCallback);
    }
  }

  /**
   * Get an empty array [] of string using the multi-array format
   * @param {object} [options] Optional Parameters.
   * @param {array} [options.arrayQuery] an empty array [] of string using the multi-array format
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  arrayStringMultiEmptyWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._arrayStringMultiEmpty(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get an empty array [] of string using the multi-array format
   * @param {object} [options] Optional Parameters.
   * @param {array} [options.arrayQuery] an empty array [] of string using the multi-array format
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  arrayStringMultiEmpty(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._arrayStringMultiEmpty(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._arrayStringMultiEmpty(options, optionalCallback);
    }
  }

  /**
   * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * mult-array format
   * @param {object} [options] Optional Parameters.
   * @param {array} [options.arrayQuery] an array of string ['ArrayQuery1', 'begin!*'();:@
   * &=+$,/?#[]end' , null, ''] using the mult-array format
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  arrayStringMultiValidWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._arrayStringMultiValid(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
   * mult-array format
   * @param {object} [options] Optional Parameters.
   * @param {array} [options.arrayQuery] an array of string ['ArrayQuery1', 'begin!*'();:@
   * &=+$,/?#[]end' , null, ''] using the mult-array format
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  arrayStringMultiValid(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._arrayStringMultiValid(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._arrayStringMultiValid(options, optionalCallback);
    }
  }

}

module.exports = Queries;
