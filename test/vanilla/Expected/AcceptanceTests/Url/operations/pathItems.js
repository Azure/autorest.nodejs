/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
 * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
 * pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
 * @param {string} localStringPath should contain value 'localStringPath'
 * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
 * @param {object} [options] Optional Parameters.
 * @param {string} [options.localStringQuery] should contain value 'localStringQuery'
 * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
 * as a query parameter
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _getAllWithValues(localStringPath, pathItemStringPath, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
  let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
  // Validate
  try {
    if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
      throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
    }
    if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
      throw new Error('localStringQuery must be of type string.');
    }
    if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
      throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
      throw new Error('pathItemStringQuery must be of type string.');
    }
    if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
      throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
      throw new Error('this.client.globalStringQuery must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery';
  requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
  requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
  requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
  let queryParameters = [];
  if (localStringQuery !== null && localStringQuery !== undefined) {
    queryParameters.push('localStringQuery=' + encodeURIComponent(localStringQuery));
  }
  if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
    queryParameters.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
  }
  if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
    queryParameters.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
 * localStringPath='localStringPath', globalStringQuery=null,
 * pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
 * @param {string} localStringPath should contain value 'localStringPath'
 * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
 * @param {object} [options] Optional Parameters.
 * @param {string} [options.localStringQuery] should contain value 'localStringQuery'
 * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
 * as a query parameter
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _getGlobalQueryNull(localStringPath, pathItemStringPath, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
  let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
  // Validate
  try {
    if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
      throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
    }
    if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
      throw new Error('localStringQuery must be of type string.');
    }
    if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
      throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
      throw new Error('pathItemStringQuery must be of type string.');
    }
    if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
      throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
      throw new Error('this.client.globalStringQuery must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery';
  requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
  requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
  requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
  let queryParameters = [];
  if (localStringQuery !== null && localStringQuery !== undefined) {
    queryParameters.push('localStringQuery=' + encodeURIComponent(localStringQuery));
  }
  if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
    queryParameters.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
  }
  if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
    queryParameters.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath',
 * localStringPath='localStringPath', globalStringQuery=null,
 * pathItemStringQuery='pathItemStringQuery', localStringQuery=null
 * @param {string} localStringPath should contain value 'localStringPath'
 * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
 * @param {object} [options] Optional Parameters.
 * @param {string} [options.localStringQuery] should contain null value
 * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
 * as a query parameter
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _getGlobalAndLocalQueryNull(localStringPath, pathItemStringPath, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
  let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
  // Validate
  try {
    if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
      throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
    }
    if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
      throw new Error('localStringQuery must be of type string.');
    }
    if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
      throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
      throw new Error('pathItemStringQuery must be of type string.');
    }
    if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
      throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
      throw new Error('this.client.globalStringQuery must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null';
  requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
  requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
  requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
  let queryParameters = [];
  if (localStringQuery !== null && localStringQuery !== undefined) {
    queryParameters.push('localStringQuery=' + encodeURIComponent(localStringQuery));
  }
  if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
    queryParameters.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
  }
  if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
    queryParameters.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
 * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
 * pathItemStringQuery=null, localStringQuery=null
 * @param {string} localStringPath should contain value 'localStringPath'
 * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
 * @param {object} [options] Optional Parameters.
 * @param {string} [options.localStringQuery] should contain value null
 * @param {string} [options.pathItemStringQuery] should contain value null
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _getLocalPathItemQueryNull(localStringPath, pathItemStringPath, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
  let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
  // Validate
  try {
    if (localStringPath === null || localStringPath === undefined || typeof localStringPath.valueOf() !== 'string') {
      throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
    }
    if (localStringQuery !== null && localStringQuery !== undefined && typeof localStringQuery.valueOf() !== 'string') {
      throw new Error('localStringQuery must be of type string.');
    }
    if (pathItemStringPath === null || pathItemStringPath === undefined || typeof pathItemStringPath.valueOf() !== 'string') {
      throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined && typeof pathItemStringQuery.valueOf() !== 'string') {
      throw new Error('pathItemStringQuery must be of type string.');
    }
    if (this.client.globalStringPath === null || this.client.globalStringPath === undefined || typeof this.client.globalStringPath.valueOf() !== 'string') {
      throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined && typeof this.client.globalStringQuery.valueOf() !== 'string') {
      throw new Error('this.client.globalStringQuery must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null';
  requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
  requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
  requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
  let queryParameters = [];
  if (localStringQuery !== null && localStringQuery !== undefined) {
    queryParameters.push('localStringQuery=' + encodeURIComponent(localStringQuery));
  }
  if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
    queryParameters.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
  }
  if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
    queryParameters.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a PathItems. */
class PathItems {
  /**
   * Create a PathItems.
   * @param {AutoRestUrlTestService} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._getAllWithValues = _getAllWithValues;
    this._getGlobalQueryNull = _getGlobalQueryNull;
    this._getGlobalAndLocalQueryNull = _getGlobalAndLocalQueryNull;
    this._getLocalPathItemQueryNull = _getLocalPathItemQueryNull;
  }

  /**
   * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
   * pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain value 'localStringQuery'
   * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
   * as a query parameter
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getAllWithValuesWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAllWithValues(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
   * pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain value 'localStringQuery'
   * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
   * as a query parameter
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getAllWithValues(localStringPath, pathItemStringPath, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAllWithValues(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAllWithValues(localStringPath, pathItemStringPath, options, optionalCallback);
    }
  }

  /**
   * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery=null,
   * pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain value 'localStringQuery'
   * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
   * as a query parameter
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getGlobalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGlobalQueryNull(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery=null,
   * pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain value 'localStringQuery'
   * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
   * as a query parameter
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getGlobalQueryNull(localStringPath, pathItemStringPath, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGlobalQueryNull(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGlobalQueryNull(localStringPath, pathItemStringPath, options, optionalCallback);
    }
  }

  /**
   * send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery=null,
   * pathItemStringQuery='pathItemStringQuery', localStringQuery=null
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain null value
   * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
   * as a query parameter
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGlobalAndLocalQueryNull(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery=null,
   * pathItemStringQuery='pathItemStringQuery', localStringQuery=null
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain null value
   * @param {string} [options.pathItemStringQuery] A string value 'pathItemStringQuery' that appears
   * as a query parameter
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getGlobalAndLocalQueryNull(localStringPath, pathItemStringPath, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGlobalAndLocalQueryNull(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGlobalAndLocalQueryNull(localStringPath, pathItemStringPath, options, optionalCallback);
    }
  }

  /**
   * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
   * pathItemStringQuery=null, localStringQuery=null
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain value null
   * @param {string} [options.pathItemStringQuery] should contain value null
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getLocalPathItemQueryNull(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
   * localStringPath='localStringPath', globalStringQuery='globalStringQuery',
   * pathItemStringQuery=null, localStringQuery=null
   * @param {string} localStringPath should contain value 'localStringPath'
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that appears in the path
   * @param {object} [options] Optional Parameters.
   * @param {string} [options.localStringQuery] should contain value null
   * @param {string} [options.pathItemStringQuery] should contain value null
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getLocalPathItemQueryNull(localStringPath, pathItemStringPath, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getLocalPathItemQueryNull(localStringPath, pathItemStringPath, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getLocalPathItemQueryNull(localStringPath, pathItemStringPath, options, optionalCallback);
    }
  }

}

module.exports = PathItems;
