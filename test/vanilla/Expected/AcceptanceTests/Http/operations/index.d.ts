/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * HttpFailure
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface HttpFailure {


    /**
     * Get empty error form server
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getEmptyErrorWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Get empty error form server
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getEmptyError(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    getEmptyError(callback: ServiceCallback<boolean>): void;
    getEmptyError(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Get empty error form server
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getNoModelErrorWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Get empty error form server
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getNoModelError(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    getNoModelError(callback: ServiceCallback<boolean>): void;
    getNoModelError(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Get empty response from server
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getNoModelEmptyWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Get empty response from server
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getNoModelEmpty(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    getNoModelEmpty(callback: ServiceCallback<boolean>): void;
    getNoModelEmpty(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
}

/**
 * @class
 * HttpSuccess
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface HttpSuccess {


    /**
     * Return 200 status code if successful
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head200WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 200 status code if successful
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head200(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head200(callback: ServiceCallback<void>): void;
    head200(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get 200 success
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Get 200 success
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    get200(callback: ServiceCallback<boolean>): void;
    get200(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Put boolean value true returning 200 success
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put200WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Put boolean value true returning 200 success
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put200(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put200(callback: ServiceCallback<void>): void;
    put200(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patch true Boolean value in request returning 200
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch200WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Patch true Boolean value in request returning 200
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch200(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch200(callback: ServiceCallback<void>): void;
    patch200(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post bollean value true in request that returns a 200
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post200WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post bollean value true in request that returns a 200
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post200(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post200(callback: ServiceCallback<void>): void;
    post200(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete simple boolean value true returns 200
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete200WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete simple boolean value true returns 200
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete200(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    delete200(callback: ServiceCallback<void>): void;
    delete200(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Put true Boolean value in request returns 201
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put201WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Put true Boolean value in request returns 201
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put201(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put201(callback: ServiceCallback<void>): void;
    put201(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post true Boolean value in request returns 201 (Created)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post201WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post true Boolean value in request returns 201 (Created)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post201(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post201(callback: ServiceCallback<void>): void;
    post201(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Put true Boolean value in request returns 202 (Accepted)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put202WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Put true Boolean value in request returns 202 (Accepted)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put202(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put202(callback: ServiceCallback<void>): void;
    put202(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patch true Boolean value in request returns 202
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch202WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Patch true Boolean value in request returns 202
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch202(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch202(callback: ServiceCallback<void>): void;
    patch202(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post true Boolean value in request returns 202 (Accepted)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post202WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post true Boolean value in request returns 202 (Accepted)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post202(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post202(callback: ServiceCallback<void>): void;
    post202(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete true Boolean value in request returns 202 (accepted)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete202WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete true Boolean value in request returns 202 (accepted)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete202(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    delete202(callback: ServiceCallback<void>): void;
    delete202(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 204 status code if successful
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head204WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 204 status code if successful
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head204(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head204(callback: ServiceCallback<void>): void;
    head204(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Put true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put204WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Put true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put204(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put204(callback: ServiceCallback<void>): void;
    put204(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patch true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch204WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Patch true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch204(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch204(callback: ServiceCallback<void>): void;
    patch204(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post204WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post204(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post204(callback: ServiceCallback<void>): void;
    post204(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete204WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete true Boolean value in request returns 204 (no content)
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete204(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    delete204(callback: ServiceCallback<void>): void;
    delete204(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 404 status code
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head404WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 404 status code
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head404(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head404(callback: ServiceCallback<void>): void;
    head404(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * HttpRedirects
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface HttpRedirects {


    /**
     * Return 300 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head300WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 300 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head300(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head300(callback: ServiceCallback<void>): void;
    head300(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 300 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get300WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string[]>>;

    /**
     * Return 300 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get300(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string[]>;
    get300(callback: ServiceCallback<string[]>): void;
    get300(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string[]>): void;


    /**
     * Return 301 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head301WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 301 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head301(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head301(callback: ServiceCallback<void>): void;
    head301(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 301 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get301WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 301 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get301(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get301(callback: ServiceCallback<void>): void;
    get301(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically
     * redirected, but should return the received 301 to the caller for evaluation
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put301WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically
     * redirected, but should return the received 301 to the caller for evaluation
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put301(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put301(callback: ServiceCallback<void>): void;
    put301(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 302 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head302WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 302 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head302(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head302(callback: ServiceCallback<void>): void;
    head302(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 302 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get302WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 302 status code and redirect to /http/success/200
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get302(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get302(callback: ServiceCallback<void>): void;
    get302(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically
     * redirected, but should return the received 302 to the caller for evaluation
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch302WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically
     * redirected, but should return the received 302 to the caller for evaluation
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch302(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch302(callback: ServiceCallback<void>): void;
    patch302(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected
     * usign a get, ultimately returning a 200 status code
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post303WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected
     * usign a get, ultimately returning a 200 status code
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post303(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post303(callback: ServiceCallback<void>): void;
    post303(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Redirect with 307, resulting in a 200 success
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head307WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Redirect with 307, resulting in a 200 success
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head307(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head307(callback: ServiceCallback<void>): void;
    head307(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Redirect get with 307, resulting in a 200 success
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get307WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Redirect get with 307, resulting in a 200 success
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get307(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get307(callback: ServiceCallback<void>): void;
    get307(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Put redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put307WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Put redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put307(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put307(callback: ServiceCallback<void>): void;
    put307(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patch redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch307WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Patch redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch307(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch307(callback: ServiceCallback<void>): void;
    patch307(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post307WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post307(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post307(callback: ServiceCallback<void>): void;
    post307(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete307WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete redirected with 307, resulting in a 200 after redirect
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete307(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    delete307(callback: ServiceCallback<void>): void;
    delete307(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * HttpClientFailure
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface HttpClientFailure {


    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head400WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head400(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    head400(callback: ServiceCallback<models.ErrorModel>): void;
    head400(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get400WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get400(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get400(callback: ServiceCallback<models.ErrorModel>): void;
    get400(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put400WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put400(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    put400(callback: ServiceCallback<models.ErrorModel>): void;
    put400(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch400WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch400(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    patch400(callback: ServiceCallback<models.ErrorModel>): void;
    patch400(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post400WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post400(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    post400(callback: ServiceCallback<models.ErrorModel>): void;
    post400(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete400WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 400 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete400(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    delete400(callback: ServiceCallback<models.ErrorModel>): void;
    delete400(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 401 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head401WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 401 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head401(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    head401(callback: ServiceCallback<models.ErrorModel>): void;
    head401(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 402 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get402WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 402 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get402(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get402(callback: ServiceCallback<models.ErrorModel>): void;
    get402(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 403 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get403WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 403 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get403(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get403(callback: ServiceCallback<models.ErrorModel>): void;
    get403(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 404 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put404WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 404 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put404(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    put404(callback: ServiceCallback<models.ErrorModel>): void;
    put404(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 405 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch405WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 405 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch405(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    patch405(callback: ServiceCallback<models.ErrorModel>): void;
    patch405(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 406 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post406WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 406 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post406(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    post406(callback: ServiceCallback<models.ErrorModel>): void;
    post406(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 407 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete407WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 407 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete407(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    delete407(callback: ServiceCallback<models.ErrorModel>): void;
    delete407(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 409 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put409WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 409 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put409(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    put409(callback: ServiceCallback<models.ErrorModel>): void;
    put409(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 410 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head410WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 410 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head410(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    head410(callback: ServiceCallback<models.ErrorModel>): void;
    head410(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 411 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get411WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 411 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get411(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get411(callback: ServiceCallback<models.ErrorModel>): void;
    get411(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 412 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get412WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 412 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get412(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get412(callback: ServiceCallback<models.ErrorModel>): void;
    get412(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 413 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put413WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 413 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put413(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    put413(callback: ServiceCallback<models.ErrorModel>): void;
    put413(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 414 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch414WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 414 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch414(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    patch414(callback: ServiceCallback<models.ErrorModel>): void;
    patch414(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 415 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post415WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 415 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post415(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    post415(callback: ServiceCallback<models.ErrorModel>): void;
    post415(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 416 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get416WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 416 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get416(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get416(callback: ServiceCallback<models.ErrorModel>): void;
    get416(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 417 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete417WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 417 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete417(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    delete417(callback: ServiceCallback<models.ErrorModel>): void;
    delete417(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 429 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head429WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 429 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head429(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    head429(callback: ServiceCallback<models.ErrorModel>): void;
    head429(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;
}

/**
 * @class
 * HttpServerFailure
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface HttpServerFailure {


    /**
     * Return 501 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head501WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 501 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head501(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    head501(callback: ServiceCallback<models.ErrorModel>): void;
    head501(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 501 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get501WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 501 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get501(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    get501(callback: ServiceCallback<models.ErrorModel>): void;
    get501(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 505 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post505WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 505 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post505(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    post505(callback: ServiceCallback<models.ErrorModel>): void;
    post505(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;


    /**
     * Return 505 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete505WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorModel>>;

    /**
     * Return 505 status code - should be represented in the client as an error
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete505(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorModel>;
    delete505(callback: ServiceCallback<models.ErrorModel>): void;
    delete505(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorModel>): void;
}

/**
 * @class
 * HttpRetry
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface HttpRetry {


    /**
     * Return 408 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    head408WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 408 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    head408(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    head408(callback: ServiceCallback<void>): void;
    head408(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 500 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put500WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 500 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put500(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put500(callback: ServiceCallback<void>): void;
    put500(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 500 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch500WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 500 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch500(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch500(callback: ServiceCallback<void>): void;
    patch500(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 502 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get502WithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 502 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get502(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get502(callback: ServiceCallback<void>): void;
    get502(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 503 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    post503WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 503 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    post503(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    post503(callback: ServiceCallback<void>): void;
    post503(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 503 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    delete503WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 503 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    delete503(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    delete503(callback: ServiceCallback<void>): void;
    delete503(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 504 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    put504WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 504 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    put504(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    put504(callback: ServiceCallback<void>): void;
    put504(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Return 504 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    patch504WithHttpOperationResponse(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Return 504 status code, then 200 after retry
     * @param {object} [options] Optional Parameters.
     * @param {boolean} [options.booleanValue] Simple boolean value true
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    patch504(options?: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch504(callback: ServiceCallback<void>): void;
    patch504(options: { booleanValue? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * MultipleResponses
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestHttpInfrastructureTestService.
 */
export interface MultipleResponses {


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model204NoModelDefaultError200ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model204NoModelDefaultError200Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model204NoModelDefaultError200Valid(callback: ServiceCallback<models.A>): void;
    get200Model204NoModelDefaultError200Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 204 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model204NoModelDefaultError204ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 204 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model204NoModelDefaultError204Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model204NoModelDefaultError204Valid(callback: ServiceCallback<models.A>): void;
    get200Model204NoModelDefaultError204Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model204NoModelDefaultError201InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model204NoModelDefaultError201Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model204NoModelDefaultError201Invalid(callback: ServiceCallback<models.A>): void;
    get200Model204NoModelDefaultError201Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 202 response with no payload:
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model204NoModelDefaultError202NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 202 response with no payload:
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model204NoModelDefaultError202None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model204NoModelDefaultError202None(callback: ServiceCallback<models.A>): void;
    get200Model204NoModelDefaultError202None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model204NoModelDefaultError400ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model204NoModelDefaultError400Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model204NoModelDefaultError400Valid(callback: ServiceCallback<models.A>): void;
    get200Model204NoModelDefaultError400Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model201ModelDefaultError200ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model201ModelDefaultError200Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model201ModelDefaultError200Valid(callback: ServiceCallback<models.A>): void;
    get200Model201ModelDefaultError200Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model201ModelDefaultError201ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model201ModelDefaultError201Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model201ModelDefaultError201Valid(callback: ServiceCallback<models.A>): void;
    get200Model201ModelDefaultError201Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200Model201ModelDefaultError400ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200Model201ModelDefaultError400Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200Model201ModelDefaultError400Valid(callback: ServiceCallback<models.A>): void;
    get200Model201ModelDefaultError400Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA201ModelC404ModelDDefaultError200ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA201ModelC404ModelDDefaultError200Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get200ModelA201ModelC404ModelDDefaultError200Valid(callback: ServiceCallback<any>): void;
    get200ModelA201ModelC404ModelDDefaultError200Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA201ModelC404ModelDDefaultError201ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA201ModelC404ModelDDefaultError201Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get200ModelA201ModelC404ModelDDefaultError201Valid(callback: ServiceCallback<any>): void;
    get200ModelA201ModelC404ModelDDefaultError201Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA201ModelC404ModelDDefaultError404ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA201ModelC404ModelDDefaultError404Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get200ModelA201ModelC404ModelDDefaultError404Valid(callback: ServiceCallback<any>): void;
    get200ModelA201ModelC404ModelDDefaultError404Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA201ModelC404ModelDDefaultError400ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA201ModelC404ModelDDefaultError400Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get200ModelA201ModelC404ModelDDefaultError400Valid(callback: ServiceCallback<any>): void;
    get200ModelA201ModelC404ModelDDefaultError400Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Send a 202 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultError202NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 202 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultError202None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultError202None(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultError202None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 204 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultError204NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 204 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultError204None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultError204None(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultError204None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultError400ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultError400Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultError400Valid(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultError400Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultNone202InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultNone202Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultNone202Invalid(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultNone202Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 204 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultNone204NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 204 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultNone204None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultNone204None(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultNone204None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 400 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultNone400NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 400 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultNone400None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultNone400None(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultNone400None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get202None204NoneDefaultNone400InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get202None204NoneDefaultNone400Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    get202None204NoneDefaultNone400Invalid(callback: ServiceCallback<void>): void;
    get202None204NoneDefaultNone400Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultModelA200ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultModelA200Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    getDefaultModelA200Valid(callback: ServiceCallback<models.A>): void;
    getDefaultModelA200Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultModelA200NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultModelA200None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    getDefaultModelA200None(callback: ServiceCallback<models.A>): void;
    getDefaultModelA200None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultModelA400ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultModelA400Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    getDefaultModelA400Valid(callback: ServiceCallback<models.A>): void;
    getDefaultModelA400Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 400 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultModelA400NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 400 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultModelA400None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    getDefaultModelA400None(callback: ServiceCallback<models.A>): void;
    getDefaultModelA400None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultNone200InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultNone200Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getDefaultNone200Invalid(callback: ServiceCallback<void>): void;
    getDefaultNone200Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 200 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultNone200NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 200 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultNone200None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getDefaultNone200None(callback: ServiceCallback<void>): void;
    getDefaultNone200None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultNone400InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultNone400Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getDefaultNone400Invalid(callback: ServiceCallback<void>): void;
    getDefaultNone400Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 400 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    getDefaultNone400NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send a 400 response with no payload
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    getDefaultNone400None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getDefaultNone400None(callback: ServiceCallback<void>): void;
    getDefaultNone400None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null
     * object of thde type for model A
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA200NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null
     * object of thde type for model A
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA200None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA200None(callback: ServiceCallback<models.A>): void;
    get200ModelA200None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with payload {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA200ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA200Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA200Valid(callback: ServiceCallback<models.A>): void;
    get200ModelA200Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA200InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA200Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA200Invalid(callback: ServiceCallback<models.A>): void;
    get200ModelA200Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA400NoneWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA400None(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA400None(callback: ServiceCallback<models.A>): void;
    get200ModelA400None(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with payload {'statusCode': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA400ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA400Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA400Valid(callback: ServiceCallback<models.A>): void;
    get200ModelA400Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA400InvalidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA400Invalid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA400Invalid(callback: ServiceCallback<models.A>): void;
    get200ModelA400Invalid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;


    /**
     * Send a 202 response with payload {'statusCode': '202'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @returns {Promise} A promise is returned.
     */
    get200ModelA202ValidWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.A>>;

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     * @param {object} [options] Optional Parameters.
     * @param {object} [options.customHeaders] Headers that will be added to the request
     * @param {function} [optionalCallback] The optional callback.
     * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
     * callback. Otherwise it returns a Promise.
     */
    get200ModelA202Valid(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.A>;
    get200ModelA202Valid(callback: ServiceCallback<models.A>): void;
    get200ModelA202Valid(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.A>): void;
}
