/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Get complex types that are polymorphic
 * @param {object} [options] Optional Parameters.
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _getValid(options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'complex/polymorphism/valid';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Fish']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Put complex types that are polymorphic
 * @param {object} complexBody Please put a salmon that looks like this:
 * {
 * 'fishtype':'Salmon',
 * 'location':'alaska',
 * 'iswild':true,
 * 'species':'king',
 * 'length':1.0,
 * 'siblings':[
 * {
 * 'fishtype':'Shark',
 * 'age':6,
 * 'birthday': '2012-01-05T01:00:00Z',
 * 'length':20.0,
 * 'species':'predator',
 * },
 * {
 * 'fishtype':'Sawshark',
 * 'age':105,
 * 'birthday': '1900-01-05T01:00:00Z',
 * 'length':10.0,
 * 'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
 * 'species':'dangerous',
 * },
 * {
 * 'fishtype': 'goblin',
 * 'age': 1,
 * 'birthday': '2015-08-08T00:00:00Z',
 * 'length': 30.0,
 * 'species': 'scary',
 * 'jawsize': 5
 * }
 * ]
 * };
 * @param {string} [complexBody.species]
 * @param {number} complexBody.length
 * @param {array} [complexBody.siblings]
 * @param {string} complexBody.fishtype Polymorphic Discriminator
 * @param {object} [options] Optional Parameters.
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _putValid(complexBody, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (complexBody === null || complexBody === undefined) {
      throw new Error('complexBody cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'complex/polymorphism/valid';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (complexBody !== null && complexBody !== undefined) {
      let requestModelMapper = new client.models['Fish']().mapper();
      requestModel = client.serialize(requestModelMapper, complexBody, 'complexBody');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(complexBody, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get complex types that are polymorphic, but not at the root of the hierarchy; also have
 * additional properties
 * @param {object} [options] Optional Parameters.
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _getComplicated(options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'complex/polymorphism/complicated';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Salmon']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Put complex types that are polymorphic, but not at the root of the hierarchy; also have
 * additional properties
 * @param {object} complexBody
 * @param {string} [complexBody.location]
 * @param {boolean} [complexBody.iswild]
 * @param {string} [complexBody.species]
 * @param {number} complexBody.length
 * @param {array} [complexBody.siblings]
 * @param {string} complexBody.fishtype Polymorphic Discriminator
 * @param {object} [options] Optional Parameters.
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _putComplicated(complexBody, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (complexBody === null || complexBody === undefined) {
      throw new Error('complexBody cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'complex/polymorphism/complicated';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (complexBody !== null && complexBody !== undefined) {
      let requestModelMapper = new client.models['Salmon']().mapper();
      requestModel = client.serialize(requestModelMapper, complexBody, 'complexBody');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(complexBody, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Put complex types that are polymorphic, omitting the discriminator
 * @param {object} complexBody
 * @param {string} [complexBody.location]
 * @param {boolean} [complexBody.iswild]
 * @param {string} [complexBody.species]
 * @param {number} complexBody.length
 * @param {array} [complexBody.siblings]
 * @param {string} complexBody.fishtype Polymorphic Discriminator
 * @param {object} [options] Optional Parameters.
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _putMissingDiscriminator(complexBody, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (complexBody === null || complexBody === undefined) {
      throw new Error('complexBody cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'complex/polymorphism/missingdiscriminator';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (complexBody !== null && complexBody !== undefined) {
      let requestModelMapper = new client.models['Salmon']().mapper();
      requestModel = client.serialize(requestModelMapper, complexBody, 'complexBody');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(complexBody, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Salmon']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Put complex types that are polymorphic, attempting to omit required 'birthday' field - the
 * request should not be allowed from the client
 * @param {object} complexBody Please attempt put a sawshark that looks like this, the client
 * should not allow this data to be sent:
 * {
 * "fishtype": "sawshark",
 * "species": "snaggle toothed",
 * "length": 18.5,
 * "age": 2,
 * "birthday": "2013-06-01T01:00:00Z",
 * "location": "alaska",
 * "picture": base64(FF FF FF FF FE),
 * "siblings": [
 * {
 * "fishtype": "shark",
 * "species": "predator",
 * "birthday": "2012-01-05T01:00:00Z",
 * "length": 20,
 * "age": 6
 * },
 * {
 * "fishtype": "sawshark",
 * "species": "dangerous",
 * "picture": base64(FF FF FF FF FE),
 * "length": 10,
 * "age": 105
 * }
 * ]
 * }
 * @param {string} [complexBody.species]
 * @param {number} complexBody.length
 * @param {array} [complexBody.siblings]
 * @param {string} complexBody.fishtype Polymorphic Discriminator
 * @param {object} [options] Optional Parameters.
 * @param {object} [options.customHeaders] Headers that will be added to the request
 * @param {function} callback The callback.
 * @returns {function} callback(err, result, request, response)
 */
function _putValidMissingRequired(complexBody, options, callback) {
  /*
   * jshint validthis: true
   */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (complexBody === null || complexBody === undefined) {
      throw new Error('complexBody cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'complex/polymorphism/missingrequired/invalid';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (complexBody !== null && complexBody !== undefined) {
      let requestModelMapper = new client.models['Fish']().mapper();
      requestModel = client.serialize(requestModelMapper, complexBody, 'complexBody');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(complexBody, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Polymorphism. */
class Polymorphism {
  /**
   * Create a Polymorphism.
   * @param {AutoRestComplexTestService} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._getValid = _getValid;
    this._putValid = _putValid;
    this._getComplicated = _getComplicated;
    this._putComplicated = _putComplicated;
    this._putMissingDiscriminator = _putMissingDiscriminator;
    this._putValidMissingRequired = _putValidMissingRequired;
  }

  /**
   * Get complex types that are polymorphic
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getValidWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getValid(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get complex types that are polymorphic
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getValid(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getValid(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getValid(options, optionalCallback);
    }
  }

  /**
   * Put complex types that are polymorphic
   * @param {object} complexBody Please put a salmon that looks like this:
   * {
   * 'fishtype':'Salmon',
   * 'location':'alaska',
   * 'iswild':true,
   * 'species':'king',
   * 'length':1.0,
   * 'siblings':[
   * {
   * 'fishtype':'Shark',
   * 'age':6,
   * 'birthday': '2012-01-05T01:00:00Z',
   * 'length':20.0,
   * 'species':'predator',
   * },
   * {
   * 'fishtype':'Sawshark',
   * 'age':105,
   * 'birthday': '1900-01-05T01:00:00Z',
   * 'length':10.0,
   * 'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   * 'species':'dangerous',
   * },
   * {
   * 'fishtype': 'goblin',
   * 'age': 1,
   * 'birthday': '2015-08-08T00:00:00Z',
   * 'length': 30.0,
   * 'species': 'scary',
   * 'jawsize': 5
   * }
   * ]
   * };
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  putValidWithHttpOperationResponse(complexBody, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._putValid(complexBody, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Put complex types that are polymorphic
   * @param {object} complexBody Please put a salmon that looks like this:
   * {
   * 'fishtype':'Salmon',
   * 'location':'alaska',
   * 'iswild':true,
   * 'species':'king',
   * 'length':1.0,
   * 'siblings':[
   * {
   * 'fishtype':'Shark',
   * 'age':6,
   * 'birthday': '2012-01-05T01:00:00Z',
   * 'length':20.0,
   * 'species':'predator',
   * },
   * {
   * 'fishtype':'Sawshark',
   * 'age':105,
   * 'birthday': '1900-01-05T01:00:00Z',
   * 'length':10.0,
   * 'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
   * 'species':'dangerous',
   * },
   * {
   * 'fishtype': 'goblin',
   * 'age': 1,
   * 'birthday': '2015-08-08T00:00:00Z',
   * 'length': 30.0,
   * 'species': 'scary',
   * 'jawsize': 5
   * }
   * ]
   * };
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  putValid(complexBody, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._putValid(complexBody, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._putValid(complexBody, options, optionalCallback);
    }
  }

  /**
   * Get complex types that are polymorphic, but not at the root of the hierarchy; also have
   * additional properties
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  getComplicatedWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getComplicated(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get complex types that are polymorphic, but not at the root of the hierarchy; also have
   * additional properties
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  getComplicated(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getComplicated(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getComplicated(options, optionalCallback);
    }
  }

  /**
   * Put complex types that are polymorphic, but not at the root of the hierarchy; also have
   * additional properties
   * @param {object} complexBody
   * @param {string} [complexBody.location]
   * @param {boolean} [complexBody.iswild]
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  putComplicatedWithHttpOperationResponse(complexBody, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._putComplicated(complexBody, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Put complex types that are polymorphic, but not at the root of the hierarchy; also have
   * additional properties
   * @param {object} complexBody
   * @param {string} [complexBody.location]
   * @param {boolean} [complexBody.iswild]
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  putComplicated(complexBody, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._putComplicated(complexBody, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._putComplicated(complexBody, options, optionalCallback);
    }
  }

  /**
   * Put complex types that are polymorphic, omitting the discriminator
   * @param {object} complexBody
   * @param {string} [complexBody.location]
   * @param {boolean} [complexBody.iswild]
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  putMissingDiscriminatorWithHttpOperationResponse(complexBody, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._putMissingDiscriminator(complexBody, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Put complex types that are polymorphic, omitting the discriminator
   * @param {object} complexBody
   * @param {string} [complexBody.location]
   * @param {boolean} [complexBody.iswild]
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  putMissingDiscriminator(complexBody, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._putMissingDiscriminator(complexBody, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._putMissingDiscriminator(complexBody, options, optionalCallback);
    }
  }

  /**
   * Put complex types that are polymorphic, attempting to omit required 'birthday' field - the
   * request should not be allowed from the client
   * @param {object} complexBody Please attempt put a sawshark that looks like this, the client
   * should not allow this data to be sent:
   * {
   * "fishtype": "sawshark",
   * "species": "snaggle toothed",
   * "length": 18.5,
   * "age": 2,
   * "birthday": "2013-06-01T01:00:00Z",
   * "location": "alaska",
   * "picture": base64(FF FF FF FF FE),
   * "siblings": [
   * {
   * "fishtype": "shark",
   * "species": "predator",
   * "birthday": "2012-01-05T01:00:00Z",
   * "length": 20,
   * "age": 6
   * },
   * {
   * "fishtype": "sawshark",
   * "species": "dangerous",
   * "picture": base64(FF FF FF FF FE),
   * "length": 10,
   * "age": 105
   * }
   * ]
   * }
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @returns {Promise} A promise is returned.
   */
  putValidMissingRequiredWithHttpOperationResponse(complexBody, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._putValidMissingRequired(complexBody, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Put complex types that are polymorphic, attempting to omit required 'birthday' field - the
   * request should not be allowed from the client
   * @param {object} complexBody Please attempt put a sawshark that looks like this, the client
   * should not allow this data to be sent:
   * {
   * "fishtype": "sawshark",
   * "species": "snaggle toothed",
   * "length": 18.5,
   * "age": 2,
   * "birthday": "2013-06-01T01:00:00Z",
   * "location": "alaska",
   * "picture": base64(FF FF FF FF FE),
   * "siblings": [
   * {
   * "fishtype": "shark",
   * "species": "predator",
   * "birthday": "2012-01-05T01:00:00Z",
   * "length": 20,
   * "age": 6
   * },
   * {
   * "fishtype": "sawshark",
   * "species": "dangerous",
   * "picture": base64(FF FF FF FF FE),
   * "length": 10,
   * "age": 105
   * }
   * ]
   * }
   * @param {string} [complexBody.species]
   * @param {number} complexBody.length
   * @param {array} [complexBody.siblings]
   * @param {string} complexBody.fishtype Polymorphic Discriminator
   * @param {object} [options] Optional Parameters.
   * @param {object} [options.customHeaders] Headers that will be added to the request
   * @param {function} [optionalCallback] The optional callback.
   * @returns {function|Promise} If a callback was passed as the last parameter, then it returns the
   * callback. Otherwise it returns a Promise.
   */
  putValidMissingRequired(complexBody, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._putValidMissingRequired(complexBody, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._putValidMissingRequired(complexBody, options, optionalCallback);
    }
  }

}

module.exports = Polymorphism;
