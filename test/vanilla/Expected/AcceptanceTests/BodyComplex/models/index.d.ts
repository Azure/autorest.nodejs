/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

export interface ErrorModel {
  status?: number;
  message?: string;
}

export interface Basic {
  /**
   * Basic Id
  */
  id?: number;
  /**
   * Name property with a very long description that does not fit on a single line and a line
   * break.
  */
  name?: string;
  /**
   * Possible values include: 'cyan', 'Magenta', 'YELLOW', 'blacK'
  */
  color?: string;
}

export interface Pet {
  id?: number;
  name?: string;
}

export interface Dog extends Pet {
  food?: string;
}

export interface Cat extends Pet {
  color?: string;
  hates?: Dog[];
}

export interface Siamese extends Cat {
  breed?: string;
}

export interface Fish {
  species?: string;
  length: number;
  siblings?: Fish[];
  /**
   * Polymorphic Discriminator
  */
  fishtype: string;
}

export interface Salmon extends Fish {
  location?: string;
  iswild?: boolean;
}

export interface SmartSalmon extends Salmon {
  collegeDegree?: string;
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
  */
  [additionalPropertyName: string]: any;
}

export interface Shark extends Fish {
  age?: number;
  birthday: Date;
}

export interface Sawshark extends Shark {
  picture?: Buffer;
}

export interface Goblinshark extends Shark {
  jawsize?: number;
  /**
   * Colors possible. Possible values include: 'pink', 'gray', 'brown'
  */
  color?: string;
}

export interface Cookiecuttershark extends Shark {
}

export interface IntWrapper {
  field1?: number;
  field2?: number;
}

export interface LongWrapper {
  field1?: number;
  field2?: number;
}

export interface FloatWrapper {
  field1?: number;
  field2?: number;
}

export interface DoubleWrapper {
  field1?: number;
  field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose?: number;
}

export interface BooleanWrapper {
  fieldTrue?: boolean;
  fieldFalse?: boolean;
}

export interface StringWrapper {
  field?: string;
  empty?: string;
  nullProperty?: string;
}

export interface DateWrapper {
  field?: Date;
  leap?: Date;
}

export interface DatetimeWrapper {
  field?: Date;
  now?: Date;
}

export interface Datetimerfc1123Wrapper {
  field?: Date;
  now?: Date;
}

export interface DurationWrapper {
  field?: moment.Duration;
}

export interface ByteWrapper {
  field?: Buffer;
}

export interface ArrayWrapper {
  arrayProperty?: string[];
}

export interface DictionaryWrapper {
  defaultProgram?: { [propertyName: string]: string };
}

export interface ReadonlyObj {
  readonly id?: string;
  size?: number;
}

export interface MyBaseType {
  propB1?: string;
  /**
   * Polymorphic Discriminator
  */
  kind: string;
  propBH1?: string;
}

export interface MyDerivedType extends MyBaseType {
  propD1?: string;
}
