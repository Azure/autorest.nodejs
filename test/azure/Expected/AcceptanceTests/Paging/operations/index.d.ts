/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Paging
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestPagingTestService.
 */
export interface Paging {


    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSinglePagesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSinglePages(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getSinglePages(callback: ServiceCallback<models.ProductResult>): void;
    getSinglePages(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.maxresults] Sets the
     * maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesWithHttpOperationResponse(options?: { clientRequestId? : string, pagingGetMultiplePagesOptions? : models.PagingGetMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.maxresults] Sets the
     * maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePages(options?: { clientRequestId? : string, pagingGetMultiplePagesOptions? : models.PagingGetMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePages(callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePages(options: { clientRequestId? : string, pagingGetMultiplePagesOptions? : models.PagingGetMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that includes a nextLink in odata format that has 10
     * pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetOdataMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OdataProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOdataMultiplePagesWithHttpOperationResponse(options?: { clientRequestId? : string, pagingGetOdataMultiplePagesOptions? : models.PagingGetOdataMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OdataProductResult>>;

    /**
     * A paging operation that includes a nextLink in odata format that has 10
     * pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetOdataMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OdataProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OdataProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OdataProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOdataMultiplePages(options?: { clientRequestId? : string, pagingGetOdataMultiplePagesOptions? : models.PagingGetOdataMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.OdataProductResult>;
    getOdataMultiplePages(callback: ServiceCallback<models.OdataProductResult>): void;
    getOdataMultiplePages(options: { clientRequestId? : string, pagingGetOdataMultiplePagesOptions? : models.PagingGetOdataMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OdataProductResult>): void;


    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} pagingGetMultiplePagesWithOffsetOptions Additional
     * parameters for the operation
     *
     * @param {number} [pagingGetMultiplePagesWithOffsetOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} pagingGetMultiplePagesWithOffsetOptions.offset Offset of
     * return value
     *
     * @param {number} [pagingGetMultiplePagesWithOffsetOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesWithOffsetWithHttpOperationResponse(pagingGetMultiplePagesWithOffsetOptions: models.PagingGetMultiplePagesWithOffsetOptions, options?: { clientRequestId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} pagingGetMultiplePagesWithOffsetOptions Additional
     * parameters for the operation
     *
     * @param {number} [pagingGetMultiplePagesWithOffsetOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} pagingGetMultiplePagesWithOffsetOptions.offset Offset of
     * return value
     *
     * @param {number} [pagingGetMultiplePagesWithOffsetOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: models.PagingGetMultiplePagesWithOffsetOptions, options?: { clientRequestId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: models.PagingGetMultiplePagesWithOffsetOptions, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesWithOffset(pagingGetMultiplePagesWithOffsetOptions: models.PagingGetMultiplePagesWithOffsetOptions, options: { clientRequestId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that fails on the first call with 500 and then retries
     * and then get a response including a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesRetryFirstWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that fails on the first call with 500 and then retries
     * and then get a response including a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesRetryFirst(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesRetryFirst(callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesRetryFirst(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the
     * 2nd call fails first with 500. The client should retry and finish all 10
     * pages eventually.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesRetrySecondWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the
     * 2nd call fails first with 500. The client should retry and finish all 10
     * pages eventually.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesRetrySecond(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesRetrySecond(callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesRetrySecond(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSinglePagesFailureWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSinglePagesFailure(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getSinglePagesFailure(callback: ServiceCallback<models.ProductResult>): void;
    getSinglePagesFailure(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesFailureWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesFailure(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesFailure(callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesFailure(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesFailureUriWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesFailureUri(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesFailureUri(callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesFailureUri(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that doesn't return a full URL, just a fragment
     *
     * @param {string} apiVersion Sets the api version to use.
     *
     * @param {string} tenant Sets the tenant to use.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OdataProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesFragmentNextLinkWithHttpOperationResponse(apiVersion: string, tenant: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OdataProductResult>>;

    /**
     * A paging operation that doesn't return a full URL, just a fragment
     *
     * @param {string} apiVersion Sets the api version to use.
     *
     * @param {string} tenant Sets the tenant to use.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OdataProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OdataProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OdataProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OdataProductResult>;
    getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, callback: ServiceCallback<models.OdataProductResult>): void;
    getMultiplePagesFragmentNextLink(apiVersion: string, tenant: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OdataProductResult>): void;


    /**
     * A paging operation that doesn't return a full URL, just a fragment with
     * parameters grouped
     *
     * @param {object} customParameterGroup Additional parameters for the operation
     *
     * @param {string} customParameterGroup.apiVersion Sets the api version to use.
     *
     * @param {string} customParameterGroup.tenant Sets the tenant to use.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OdataProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesFragmentWithGroupingNextLinkWithHttpOperationResponse(customParameterGroup: models.CustomParameterGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OdataProductResult>>;

    /**
     * A paging operation that doesn't return a full URL, just a fragment with
     * parameters grouped
     *
     * @param {object} customParameterGroup Additional parameters for the operation
     *
     * @param {string} customParameterGroup.apiVersion Sets the api version to use.
     *
     * @param {string} customParameterGroup.tenant Sets the tenant to use.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OdataProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OdataProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OdataProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: models.CustomParameterGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OdataProductResult>;
    getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: models.CustomParameterGroup, callback: ServiceCallback<models.OdataProductResult>): void;
    getMultiplePagesFragmentWithGroupingNextLink(customParameterGroup: models.CustomParameterGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OdataProductResult>): void;


    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesLROWithHttpOperationResponse(options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesLRO(options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesLRO(callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesLRO(options: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that doesn't return a full URL, just a fragment
     *
     * @param {string} apiVersion Sets the api version to use.
     *
     * @param {string} tenant Sets the tenant to use.
     *
     * @param {string} nextLink Next link for list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OdataProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    nextFragmentWithHttpOperationResponse(apiVersion: string, tenant: string, nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OdataProductResult>>;

    /**
     * A paging operation that doesn't return a full URL, just a fragment
     *
     * @param {string} apiVersion Sets the api version to use.
     *
     * @param {string} tenant Sets the tenant to use.
     *
     * @param {string} nextLink Next link for list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OdataProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OdataProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OdataProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    nextFragment(apiVersion: string, tenant: string, nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OdataProductResult>;
    nextFragment(apiVersion: string, tenant: string, nextLink: string, callback: ServiceCallback<models.OdataProductResult>): void;
    nextFragment(apiVersion: string, tenant: string, nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OdataProductResult>): void;


    /**
     * A paging operation that doesn't return a full URL, just a fragment
     *
     * @param {string} nextLink Next link for list operation.
     *
     * @param {object} customParameterGroup Additional parameters for the operation
     *
     * @param {string} customParameterGroup.apiVersion Sets the api version to use.
     *
     * @param {string} customParameterGroup.tenant Sets the tenant to use.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OdataProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    nextFragmentWithGroupingWithHttpOperationResponse(nextLink: string, customParameterGroup: models.CustomParameterGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OdataProductResult>>;

    /**
     * A paging operation that doesn't return a full URL, just a fragment
     *
     * @param {string} nextLink Next link for list operation.
     *
     * @param {object} customParameterGroup Additional parameters for the operation
     *
     * @param {string} customParameterGroup.apiVersion Sets the api version to use.
     *
     * @param {string} customParameterGroup.tenant Sets the tenant to use.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OdataProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OdataProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OdataProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    nextFragmentWithGrouping(nextLink: string, customParameterGroup: models.CustomParameterGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OdataProductResult>;
    nextFragmentWithGrouping(nextLink: string, customParameterGroup: models.CustomParameterGroup, callback: ServiceCallback<models.OdataProductResult>): void;
    nextFragmentWithGrouping(nextLink: string, customParameterGroup: models.CustomParameterGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OdataProductResult>): void;


    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetMultiplePagesLROWithHttpOperationResponse(options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetMultiplePagesLRO(options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    beginGetMultiplePagesLRO(callback: ServiceCallback<models.ProductResult>): void;
    beginGetMultiplePagesLRO(options: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSinglePagesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSinglePagesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getSinglePagesNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getSinglePagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.maxresults] Sets the
     * maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesNextWithHttpOperationResponse(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesOptions? : models.PagingGetMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.maxresults] Sets the
     * maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesNext(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesOptions? : models.PagingGetMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesNext(nextPageLink: string, options: { clientRequestId? : string, pagingGetMultiplePagesOptions? : models.PagingGetMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that includes a nextLink in odata format that has 10
     * pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetOdataMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OdataProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOdataMultiplePagesNextWithHttpOperationResponse(nextPageLink: string, options?: { clientRequestId? : string, pagingGetOdataMultiplePagesOptions? : models.PagingGetOdataMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OdataProductResult>>;

    /**
     * A paging operation that includes a nextLink in odata format that has 10
     * pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetOdataMultiplePagesOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetOdataMultiplePagesOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OdataProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OdataProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OdataProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOdataMultiplePagesNext(nextPageLink: string, options?: { clientRequestId? : string, pagingGetOdataMultiplePagesOptions? : models.PagingGetOdataMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.OdataProductResult>;
    getOdataMultiplePagesNext(nextPageLink: string, callback: ServiceCallback<models.OdataProductResult>): void;
    getOdataMultiplePagesNext(nextPageLink: string, options: { clientRequestId? : string, pagingGetOdataMultiplePagesOptions? : models.PagingGetOdataMultiplePagesOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OdataProductResult>): void;


    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesWithOffsetNextOptions]
     * Additional parameters for the operation
     *
     * @param {number}
     * [options.pagingGetMultiplePagesWithOffsetNextOptions.maxresults] Sets the
     * maximum number of items to return in the response.
     *
     * @param {number}
     * [options.pagingGetMultiplePagesWithOffsetNextOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesWithOffsetNextWithHttpOperationResponse(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesWithOffsetNextOptions? : models.PagingGetMultiplePagesWithOffsetNextOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesWithOffsetNextOptions]
     * Additional parameters for the operation
     *
     * @param {number}
     * [options.pagingGetMultiplePagesWithOffsetNextOptions.maxresults] Sets the
     * maximum number of items to return in the response.
     *
     * @param {number}
     * [options.pagingGetMultiplePagesWithOffsetNextOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesWithOffsetNext(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesWithOffsetNextOptions? : models.PagingGetMultiplePagesWithOffsetNextOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesWithOffsetNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesWithOffsetNext(nextPageLink: string, options: { clientRequestId? : string, pagingGetMultiplePagesWithOffsetNextOptions? : models.PagingGetMultiplePagesWithOffsetNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that fails on the first call with 500 and then retries
     * and then get a response including a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesRetryFirstNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that fails on the first call with 500 and then retries
     * and then get a response including a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesRetryFirstNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesRetryFirstNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesRetryFirstNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the
     * 2nd call fails first with 500. The client should retry and finish all 10
     * pages eventually.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesRetrySecondNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the
     * 2nd call fails first with 500. The client should retry and finish all 10
     * pages eventually.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesRetrySecondNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesRetrySecondNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesRetrySecondNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSinglePagesFailureNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSinglePagesFailureNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getSinglePagesFailureNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getSinglePagesFailureNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesFailureNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesFailureNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesFailureNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesFailureNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesFailureUriNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesFailureUriNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesFailureUriNext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesFailureUriNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiplePagesLRONextWithHttpOperationResponse(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiplePagesLRONext(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    getMultiplePagesLRONext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    getMultiplePagesLRONext(nextPageLink: string, options: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;


    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetMultiplePagesLRONextWithHttpOperationResponse(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductResult>>;

    /**
     * A long-running paging operation that includes a nextLink that has 10 pages
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientRequestId]
     *
     * @param {object} [options.pagingGetMultiplePagesLROOptions] Additional
     * parameters for the operation
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.maxresults] Sets
     * the maximum number of items to return in the response.
     *
     * @param {number} [options.pagingGetMultiplePagesLROOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetMultiplePagesLRONext(nextPageLink: string, options?: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductResult>;
    beginGetMultiplePagesLRONext(nextPageLink: string, callback: ServiceCallback<models.ProductResult>): void;
    beginGetMultiplePagesLRONext(nextPageLink: string, options: { clientRequestId? : string, pagingGetMultiplePagesLROOptions? : models.PagingGetMultiplePagesLROOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductResult>): void;
}
