/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Post a bunch of required parameters grouped
 *
 * @param {object} parameterGroupingPostRequiredParameters Additional
 * parameters for the operation
 *
 * @param {number} parameterGroupingPostRequiredParameters.body
 *
 * @param {string} [parameterGroupingPostRequiredParameters.customHeader]
 *
 * @param {number} [parameterGroupingPostRequiredParameters.query] Query
 * parameter with default
 *
 * @param {string} parameterGroupingPostRequiredParameters.path Path parameter
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postRequired(parameterGroupingPostRequiredParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (parameterGroupingPostRequiredParameters === null || parameterGroupingPostRequiredParameters === undefined) {
      throw new Error('parameterGroupingPostRequiredParameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  let customHeader;
  let query;
  let path;
  try {
    if (parameterGroupingPostRequiredParameters !== null && parameterGroupingPostRequiredParameters !== undefined) {
      body = parameterGroupingPostRequiredParameters.body;
      if (body === null || body === undefined || typeof body !== 'number') {
        throw new Error('body cannot be null or undefined and it must be of type number.');
      }
    }
    if (parameterGroupingPostRequiredParameters !== null && parameterGroupingPostRequiredParameters !== undefined) {
      customHeader = parameterGroupingPostRequiredParameters.customHeader;
      if (customHeader !== null && customHeader !== undefined && typeof customHeader.valueOf() !== 'string') {
        throw new Error('customHeader must be of type string.');
      }
    }
    if (parameterGroupingPostRequiredParameters !== null && parameterGroupingPostRequiredParameters !== undefined) {
      query = parameterGroupingPostRequiredParameters.query;
      if (query !== null && query !== undefined && typeof query !== 'number') {
        throw new Error('query must be of type number.');
      }
    }
    if (parameterGroupingPostRequiredParameters !== null && parameterGroupingPostRequiredParameters !== undefined) {
      path = parameterGroupingPostRequiredParameters.path;
      if (path === null || path === undefined || typeof path.valueOf() !== 'string') {
        throw new Error('path cannot be null or undefined and it must be of type string.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'parameterGrouping/postRequired/{path}';
  requestUrl = requestUrl.replace('{path}', encodeURIComponent(path));
  let queryParameters = [];
  if (query !== null && query !== undefined) {
    queryParameters.push('query=' + encodeURIComponent(query.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (customHeader !== undefined && customHeader !== null) {
    httpRequest.headers['customHeader'] = customHeader;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: true,
        serializedName: 'body',
        type: {
          name: 'Number'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Post a bunch of optional parameters grouped
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.parameterGroupingPostOptionalParameters] Additional
 * parameters for the operation
 *
 * @param {string}
 * [options.parameterGroupingPostOptionalParameters.customHeader]
 *
 * @param {number} [options.parameterGroupingPostOptionalParameters.query]
 * Query parameter with default
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postOptional(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let parameterGroupingPostOptionalParameters = (options && options.parameterGroupingPostOptionalParameters !== undefined) ? options.parameterGroupingPostOptionalParameters : undefined;
  // Validate
  try {
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let customHeader;
  let query;
  try {
    if (parameterGroupingPostOptionalParameters !== null && parameterGroupingPostOptionalParameters !== undefined) {
      customHeader = parameterGroupingPostOptionalParameters.customHeader;
      if (customHeader !== null && customHeader !== undefined && typeof customHeader.valueOf() !== 'string') {
        throw new Error('customHeader must be of type string.');
      }
    }
    if (parameterGroupingPostOptionalParameters !== null && parameterGroupingPostOptionalParameters !== undefined) {
      query = parameterGroupingPostOptionalParameters.query;
      if (query !== null && query !== undefined && typeof query !== 'number') {
        throw new Error('query must be of type number.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'parameterGrouping/postOptional';
  let queryParameters = [];
  if (query !== null && query !== undefined) {
    queryParameters.push('query=' + encodeURIComponent(query.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (customHeader !== undefined && customHeader !== null) {
    httpRequest.headers['customHeader'] = customHeader;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Post parameters from multiple different parameter groups
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.firstParameterGroup] Additional parameters for the
 * operation
 *
 * @param {string} [options.firstParameterGroup.headerOne]
 *
 * @param {number} [options.firstParameterGroup.queryOne] Query parameter with
 * default
 *
 * @param {object}
 * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup] Additional
 * parameters for the operation
 *
 * @param {string}
 * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup.headerTwo]
 *
 * @param {number}
 * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup.queryTwo]
 * Query parameter with default
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postMultiParamGroups(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let firstParameterGroup = (options && options.firstParameterGroup !== undefined) ? options.firstParameterGroup : undefined;
  let parameterGroupingPostMultiParamGroupsSecondParamGroup = (options && options.parameterGroupingPostMultiParamGroupsSecondParamGroup !== undefined) ? options.parameterGroupingPostMultiParamGroupsSecondParamGroup : undefined;
  // Validate
  try {
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let headerOne;
  let queryOne;
  let headerTwo;
  let queryTwo;
  try {
    if (firstParameterGroup !== null && firstParameterGroup !== undefined) {
      headerOne = firstParameterGroup.headerOne;
      if (headerOne !== null && headerOne !== undefined && typeof headerOne.valueOf() !== 'string') {
        throw new Error('headerOne must be of type string.');
      }
    }
    if (firstParameterGroup !== null && firstParameterGroup !== undefined) {
      queryOne = firstParameterGroup.queryOne;
      if (queryOne !== null && queryOne !== undefined && typeof queryOne !== 'number') {
        throw new Error('queryOne must be of type number.');
      }
    }
    if (parameterGroupingPostMultiParamGroupsSecondParamGroup !== null && parameterGroupingPostMultiParamGroupsSecondParamGroup !== undefined) {
      headerTwo = parameterGroupingPostMultiParamGroupsSecondParamGroup.headerTwo;
      if (headerTwo !== null && headerTwo !== undefined && typeof headerTwo.valueOf() !== 'string') {
        throw new Error('headerTwo must be of type string.');
      }
    }
    if (parameterGroupingPostMultiParamGroupsSecondParamGroup !== null && parameterGroupingPostMultiParamGroupsSecondParamGroup !== undefined) {
      queryTwo = parameterGroupingPostMultiParamGroupsSecondParamGroup.queryTwo;
      if (queryTwo !== null && queryTwo !== undefined && typeof queryTwo !== 'number') {
        throw new Error('queryTwo must be of type number.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'parameterGrouping/postMultipleParameterGroups';
  let queryParameters = [];
  if (queryOne !== null && queryOne !== undefined) {
    queryParameters.push('query-one=' + encodeURIComponent(queryOne.toString()));
  }
  if (queryTwo !== null && queryTwo !== undefined) {
    queryParameters.push('query-two=' + encodeURIComponent(queryTwo.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (headerOne !== undefined && headerOne !== null) {
    httpRequest.headers['header-one'] = headerOne;
  }
  if (headerTwo !== undefined && headerTwo !== null) {
    httpRequest.headers['header-two'] = headerTwo;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Post parameters with a shared parameter group object
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.firstParameterGroup] Additional parameters for the
 * operation
 *
 * @param {string} [options.firstParameterGroup.headerOne]
 *
 * @param {number} [options.firstParameterGroup.queryOne] Query parameter with
 * default
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSharedParameterGroupObject(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let firstParameterGroup = (options && options.firstParameterGroup !== undefined) ? options.firstParameterGroup : undefined;
  // Validate
  try {
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let headerOne;
  let queryOne;
  try {
    if (firstParameterGroup !== null && firstParameterGroup !== undefined) {
      headerOne = firstParameterGroup.headerOne;
      if (headerOne !== null && headerOne !== undefined && typeof headerOne.valueOf() !== 'string') {
        throw new Error('headerOne must be of type string.');
      }
    }
    if (firstParameterGroup !== null && firstParameterGroup !== undefined) {
      queryOne = firstParameterGroup.queryOne;
      if (queryOne !== null && queryOne !== undefined && typeof queryOne !== 'number') {
        throw new Error('queryOne must be of type number.');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'parameterGrouping/sharedParameterGroupObject';
  let queryParameters = [];
  if (queryOne !== null && queryOne !== undefined) {
    queryParameters.push('query-one=' + encodeURIComponent(queryOne.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (headerOne !== undefined && headerOne !== null) {
    httpRequest.headers['header-one'] = headerOne;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ParameterGrouping. */
class ParameterGrouping {
  /**
   * Create a ParameterGrouping.
   * @param {AutoRestParameterGroupingTestService} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._postRequired = _postRequired;
    this._postOptional = _postOptional;
    this._postMultiParamGroups = _postMultiParamGroups;
    this._postSharedParameterGroupObject = _postSharedParameterGroupObject;
  }

  /**
   * Post a bunch of required parameters grouped
   *
   * @param {object} parameterGroupingPostRequiredParameters Additional
   * parameters for the operation
   *
   * @param {number} parameterGroupingPostRequiredParameters.body
   *
   * @param {string} [parameterGroupingPostRequiredParameters.customHeader]
   *
   * @param {number} [parameterGroupingPostRequiredParameters.query] Query
   * parameter with default
   *
   * @param {string} parameterGroupingPostRequiredParameters.path Path parameter
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postRequiredWithHttpOperationResponse(parameterGroupingPostRequiredParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postRequired(parameterGroupingPostRequiredParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post a bunch of required parameters grouped
   *
   * @param {object} parameterGroupingPostRequiredParameters Additional
   * parameters for the operation
   *
   * @param {number} parameterGroupingPostRequiredParameters.body
   *
   * @param {string} [parameterGroupingPostRequiredParameters.customHeader]
   *
   * @param {number} [parameterGroupingPostRequiredParameters.query] Query
   * parameter with default
   *
   * @param {string} parameterGroupingPostRequiredParameters.path Path parameter
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postRequired(parameterGroupingPostRequiredParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postRequired(parameterGroupingPostRequiredParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postRequired(parameterGroupingPostRequiredParameters, options, optionalCallback);
    }
  }

  /**
   * Post a bunch of optional parameters grouped
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.parameterGroupingPostOptionalParameters] Additional
   * parameters for the operation
   *
   * @param {string}
   * [options.parameterGroupingPostOptionalParameters.customHeader]
   *
   * @param {number} [options.parameterGroupingPostOptionalParameters.query]
   * Query parameter with default
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postOptionalWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postOptional(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post a bunch of optional parameters grouped
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.parameterGroupingPostOptionalParameters] Additional
   * parameters for the operation
   *
   * @param {string}
   * [options.parameterGroupingPostOptionalParameters.customHeader]
   *
   * @param {number} [options.parameterGroupingPostOptionalParameters.query]
   * Query parameter with default
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postOptional(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postOptional(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postOptional(options, optionalCallback);
    }
  }

  /**
   * Post parameters from multiple different parameter groups
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.firstParameterGroup] Additional parameters for the
   * operation
   *
   * @param {string} [options.firstParameterGroup.headerOne]
   *
   * @param {number} [options.firstParameterGroup.queryOne] Query parameter with
   * default
   *
   * @param {object}
   * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup] Additional
   * parameters for the operation
   *
   * @param {string}
   * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup.headerTwo]
   *
   * @param {number}
   * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup.queryTwo]
   * Query parameter with default
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postMultiParamGroupsWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postMultiParamGroups(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post parameters from multiple different parameter groups
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.firstParameterGroup] Additional parameters for the
   * operation
   *
   * @param {string} [options.firstParameterGroup.headerOne]
   *
   * @param {number} [options.firstParameterGroup.queryOne] Query parameter with
   * default
   *
   * @param {object}
   * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup] Additional
   * parameters for the operation
   *
   * @param {string}
   * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup.headerTwo]
   *
   * @param {number}
   * [options.parameterGroupingPostMultiParamGroupsSecondParamGroup.queryTwo]
   * Query parameter with default
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postMultiParamGroups(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postMultiParamGroups(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postMultiParamGroups(options, optionalCallback);
    }
  }

  /**
   * Post parameters with a shared parameter group object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.firstParameterGroup] Additional parameters for the
   * operation
   *
   * @param {string} [options.firstParameterGroup.headerOne]
   *
   * @param {number} [options.firstParameterGroup.queryOne] Query parameter with
   * default
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSharedParameterGroupObjectWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSharedParameterGroupObject(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post parameters with a shared parameter group object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.firstParameterGroup] Additional parameters for the
   * operation
   *
   * @param {string} [options.firstParameterGroup.headerOne]
   *
   * @param {number} [options.firstParameterGroup.queryOne] Query parameter with
   * default
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSharedParameterGroupObject(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSharedParameterGroupObject(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSharedParameterGroupObject(options, optionalCallback);
    }
  }

}

module.exports = ParameterGrouping;
