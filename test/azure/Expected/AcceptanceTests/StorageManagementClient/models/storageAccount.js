/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The storage account.
 *
 * @extends models['Resource']
 */
class StorageAccount extends models['Resource'] {
  /**
   * Create a StorageAccount.
   * @property {string} [provisioningState] Gets the status of the storage
   * account at the time the operation was called. Possible values include:
   * 'Creating', 'ResolvingDNS', 'Succeeded'
   * @property {string} [accountType] Gets the type of the storage account.
   * Possible values include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS',
   * 'Standard_RAGRS', 'Premium_LRS'
   * @property {object} [primaryEndpoints] Gets the URLs that are used to
   * perform a retrieval of a public blob, queue or table object.Note that
   * StandardZRS and PremiumLRS accounts only return the blob endpoint.
   * @property {string} [primaryEndpoints.blob] Gets the blob endpoint.
   * @property {string} [primaryEndpoints.queue] Gets the queue endpoint.
   * @property {string} [primaryEndpoints.table] Gets the table endpoint.
   * @property {object} [primaryEndpoints.dummyEndPoint] Dummy EndPoint
   * @property {object} [primaryEndpoints.fooPoint] Foo point
   * @property {object} [primaryEndpoints.fooPoint.barPoint] Bar point
   * @property {object} [primaryEndpoints.fooPoint.barPoint.recursivePoint]
   * Recursive Endpoints
   * @property {string} [primaryLocation] Gets the location of the primary for
   * the storage account.
   * @property {string} [statusOfPrimary] Gets the status indicating whether
   * the primary location of the storage account is available or unavailable.
   * Possible values include: 'Available', 'Unavailable'
   * @property {date} [lastGeoFailoverTime] Gets the timestamp of the most
   * recent instance of a failover to the secondary location. Only the most
   * recent timestamp is retained. This element is not returned if there has
   * never been a failover instance. Only available if the accountType is
   * StandardGRS or StandardRAGRS.
   * @property {string} [secondaryLocation] Gets the location of the geo
   * replicated secondary for the storage account. Only available if the
   * accountType is StandardGRS or StandardRAGRS.
   * @property {string} [statusOfSecondary] Gets the status indicating whether
   * the secondary location of the storage account is available or unavailable.
   * Only available if the accountType is StandardGRS or StandardRAGRS.
   * Possible values include: 'Available', 'Unavailable'
   * @property {date} [creationTime] Gets the creation date and time of the
   * storage account in UTC.
   * @property {object} [customDomain] Gets the user assigned custom domain
   * assigned to this storage account.
   * @property {string} [customDomain.name] Gets or sets the custom domain
   * name. Name is the CNAME source.
   * @property {boolean} [customDomain.useSubDomain] Indicates whether indirect
   * CName validation is enabled. Default value is false. This should only be
   * set on updates
   * @property {object} [secondaryEndpoints] Gets the URLs that are used to
   * perform a retrieval of a public blob, queue or table object from the
   * secondary location of the storage account. Only available if the
   * accountType is StandardRAGRS.
   * @property {string} [secondaryEndpoints.blob] Gets the blob endpoint.
   * @property {string} [secondaryEndpoints.queue] Gets the queue endpoint.
   * @property {string} [secondaryEndpoints.table] Gets the table endpoint.
   * @property {object} [secondaryEndpoints.dummyEndPoint] Dummy EndPoint
   * @property {object} [secondaryEndpoints.fooPoint] Foo point
   * @property {object} [secondaryEndpoints.fooPoint.barPoint] Bar point
   * @property {object} [secondaryEndpoints.fooPoint.barPoint.recursivePoint]
   * Recursive Endpoints
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StorageAccount
   *
   * @returns {object} metadata of StorageAccount
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StorageAccount',
      type: {
        name: 'Composite',
        className: 'StorageAccount',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Creating', 'ResolvingDNS', 'Succeeded' ]
            }
          },
          accountType: {
            required: false,
            serializedName: 'properties.accountType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS' ]
            }
          },
          primaryEndpoints: {
            required: false,
            serializedName: 'properties.primaryEndpoints',
            type: {
              name: 'Composite',
              className: 'Endpoints'
            }
          },
          primaryLocation: {
            required: false,
            serializedName: 'properties.primaryLocation',
            type: {
              name: 'String'
            }
          },
          statusOfPrimary: {
            required: false,
            serializedName: 'properties.statusOfPrimary',
            type: {
              name: 'Enum',
              allowedValues: [ 'Available', 'Unavailable' ]
            }
          },
          lastGeoFailoverTime: {
            required: false,
            serializedName: 'properties.lastGeoFailoverTime',
            type: {
              name: 'DateTime'
            }
          },
          secondaryLocation: {
            required: false,
            serializedName: 'properties.secondaryLocation',
            type: {
              name: 'String'
            }
          },
          statusOfSecondary: {
            required: false,
            serializedName: 'properties.statusOfSecondary',
            type: {
              name: 'Enum',
              allowedValues: [ 'Available', 'Unavailable' ]
            }
          },
          creationTime: {
            required: false,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          customDomain: {
            required: false,
            serializedName: 'properties.customDomain',
            type: {
              name: 'Composite',
              className: 'CustomDomain'
            }
          },
          secondaryEndpoints: {
            required: false,
            serializedName: 'properties.secondaryEndpoints',
            type: {
              name: 'Composite',
              className: 'Endpoints'
            }
          }
        }
      }
    };
  }
}

module.exports = StorageAccount;
