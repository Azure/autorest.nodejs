/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the StorageAccountCheckNameAvailabilityParameters class.
 * @constructor
 * @property {string} name
 * @property {string} [type] Default value: 'Microsoft.Storage/storageAccounts'
 * .
 */
export interface StorageAccountCheckNameAvailabilityParameters {
  name: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the CheckNameAvailabilityResult class.
 * @constructor
 * The CheckNameAvailability operation response.
 *
 * @property {boolean} [nameAvailable] Gets a boolean value that indicates
 * whether the name is available for you to use. If true, the name is
 * available. If false, the name has already been taken or invalid and cannot
 * be used.
 * @property {string} [reason] Gets the reason that a storage account name
 * could not be used. The Reason element is only returned if NameAvailable is
 * false. Possible values include: 'AccountNameInvalid', 'AlreadyExists'
 * @property {string} [message] Gets an error message explaining the Reason
 * value in more detail.
 */
export interface CheckNameAvailabilityResult {
  nameAvailable?: boolean;
  reason?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * @property {string} [id] Resource Id
 * @property {string} [name] Resource name
 * @property {string} [type] Resource type
 * @property {string} location Resource location
 * @property {object} [tags] Resource tags
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the StorageAccountCreateParameters class.
 * @constructor
 * The parameters to provide for the account.
 *
 * @property {string} [accountType] Gets or sets the account type. Possible
 * values include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS',
 * 'Standard_RAGRS', 'Premium_LRS'
 */
export interface StorageAccountCreateParameters extends Resource {
  accountType?: string;
}

/**
 * @class
 * Initializes a new instance of the Bar class.
 * @constructor
 * The URIs that are used to perform a retrieval of a public blob, queue or
 * table object.
 *
 * @property {object} [recursivePoint] Recursive Endpoints
 * @property {string} [recursivePoint.blob] Gets the blob endpoint.
 * @property {string} [recursivePoint.queue] Gets the queue endpoint.
 * @property {string} [recursivePoint.table] Gets the table endpoint.
 * @property {object} [recursivePoint.dummyEndPoint] Dummy EndPoint
 * @property {object} [recursivePoint.fooPoint] Foo point
 * @property {object} [recursivePoint.fooPoint.barPoint] Bar point
 */
export interface Bar {
  recursivePoint?: Endpoints;
}

/**
 * @class
 * Initializes a new instance of the Foo class.
 * @constructor
 * The URIs that are used to perform a retrieval of a public blob, queue or
 * table object.
 *
 * @property {object} [barPoint] Bar point
 * @property {object} [barPoint.recursivePoint] Recursive Endpoints
 * @property {string} [barPoint.recursivePoint.blob] Gets the blob endpoint.
 * @property {string} [barPoint.recursivePoint.queue] Gets the queue endpoint.
 * @property {string} [barPoint.recursivePoint.table] Gets the table endpoint.
 * @property {object} [barPoint.recursivePoint.dummyEndPoint] Dummy EndPoint
 * @property {object} [barPoint.recursivePoint.fooPoint] Foo point
 */
export interface Foo {
  barPoint?: Bar;
}

/**
 * @class
 * Initializes a new instance of the Endpoints class.
 * @constructor
 * The URIs that are used to perform a retrieval of a public blob, queue or
 * table object.
 *
 * @property {string} [blob] Gets the blob endpoint.
 * @property {string} [queue] Gets the queue endpoint.
 * @property {string} [table] Gets the table endpoint.
 * @property {object} [dummyEndPoint] Dummy EndPoint
 * @property {object} [fooPoint] Foo point
 * @property {object} [fooPoint.barPoint] Bar point
 * @property {object} [fooPoint.barPoint.recursivePoint] Recursive Endpoints
 */
export interface Endpoints {
  blob?: string;
  queue?: string;
  table?: string;
  dummyEndPoint?: Endpoints;
  fooPoint?: Foo;
}

/**
 * @class
 * Initializes a new instance of the CustomDomain class.
 * @constructor
 * The custom domain assigned to this storage account. This can be set via
 * Update.
 *
 * @property {string} [name] Gets or sets the custom domain name. Name is the
 * CNAME source.
 * @property {boolean} [useSubDomain] Indicates whether indirect CName
 * validation is enabled. Default value is false. This should only be set on
 * updates
 */
export interface CustomDomain {
  name?: string;
  useSubDomain?: boolean;
}

/**
 * @class
 * Initializes a new instance of the StorageAccount class.
 * @constructor
 * The storage account.
 *
 * @property {string} [provisioningState] Gets the status of the storage
 * account at the time the operation was called. Possible values include:
 * 'Creating', 'ResolvingDNS', 'Succeeded'
 * @property {string} [accountType] Gets the type of the storage account.
 * Possible values include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS',
 * 'Standard_RAGRS', 'Premium_LRS'
 * @property {object} [primaryEndpoints] Gets the URLs that are used to perform
 * a retrieval of a public blob, queue or table object.Note that StandardZRS
 * and PremiumLRS accounts only return the blob endpoint.
 * @property {string} [primaryEndpoints.blob] Gets the blob endpoint.
 * @property {string} [primaryEndpoints.queue] Gets the queue endpoint.
 * @property {string} [primaryEndpoints.table] Gets the table endpoint.
 * @property {object} [primaryEndpoints.dummyEndPoint] Dummy EndPoint
 * @property {object} [primaryEndpoints.fooPoint] Foo point
 * @property {object} [primaryEndpoints.fooPoint.barPoint] Bar point
 * @property {object} [primaryEndpoints.fooPoint.barPoint.recursivePoint]
 * Recursive Endpoints
 * @property {string} [primaryLocation] Gets the location of the primary for
 * the storage account.
 * @property {string} [statusOfPrimary] Gets the status indicating whether the
 * primary location of the storage account is available or unavailable.
 * Possible values include: 'Available', 'Unavailable'
 * @property {date} [lastGeoFailoverTime] Gets the timestamp of the most recent
 * instance of a failover to the secondary location. Only the most recent
 * timestamp is retained. This element is not returned if there has never been
 * a failover instance. Only available if the accountType is StandardGRS or
 * StandardRAGRS.
 * @property {string} [secondaryLocation] Gets the location of the geo
 * replicated secondary for the storage account. Only available if the
 * accountType is StandardGRS or StandardRAGRS.
 * @property {string} [statusOfSecondary] Gets the status indicating whether
 * the secondary location of the storage account is available or unavailable.
 * Only available if the accountType is StandardGRS or StandardRAGRS. Possible
 * values include: 'Available', 'Unavailable'
 * @property {date} [creationTime] Gets the creation date and time of the
 * storage account in UTC.
 * @property {object} [customDomain] Gets the user assigned custom domain
 * assigned to this storage account.
 * @property {string} [customDomain.name] Gets or sets the custom domain name.
 * Name is the CNAME source.
 * @property {boolean} [customDomain.useSubDomain] Indicates whether indirect
 * CName validation is enabled. Default value is false. This should only be set
 * on updates
 * @property {object} [secondaryEndpoints] Gets the URLs that are used to
 * perform a retrieval of a public blob, queue or table object from the
 * secondary location of the storage account. Only available if the accountType
 * is StandardRAGRS.
 * @property {string} [secondaryEndpoints.blob] Gets the blob endpoint.
 * @property {string} [secondaryEndpoints.queue] Gets the queue endpoint.
 * @property {string} [secondaryEndpoints.table] Gets the table endpoint.
 * @property {object} [secondaryEndpoints.dummyEndPoint] Dummy EndPoint
 * @property {object} [secondaryEndpoints.fooPoint] Foo point
 * @property {object} [secondaryEndpoints.fooPoint.barPoint] Bar point
 * @property {object} [secondaryEndpoints.fooPoint.barPoint.recursivePoint]
 * Recursive Endpoints
 */
export interface StorageAccount extends Resource {
  provisioningState?: string;
  accountType?: string;
  primaryEndpoints?: Endpoints;
  primaryLocation?: string;
  statusOfPrimary?: string;
  lastGeoFailoverTime?: Date;
  secondaryLocation?: string;
  statusOfSecondary?: string;
  creationTime?: Date;
  customDomain?: CustomDomain;
  secondaryEndpoints?: Endpoints;
}

/**
 * @class
 * Initializes a new instance of the StorageAccountKeys class.
 * @constructor
 * The access keys for the storage account.
 *
 * @property {string} [key1] Gets the value of key 1.
 * @property {string} [key2] Gets the value of key 2.
 */
export interface StorageAccountKeys {
  key1?: string;
  key2?: string;
}

/**
 * @class
 * Initializes a new instance of the StorageAccountUpdateParameters class.
 * @constructor
 * The parameters to update on the account.
 *
 * @property {string} [accountType] Gets or sets the account type. Note that
 * StandardZRS and PremiumLRS accounts cannot be changed to other account
 * types, and other account types cannot be changed to StandardZRS or
 * PremiumLRS. Possible values include: 'Standard_LRS', 'Standard_ZRS',
 * 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS'
 * @property {object} [customDomain] User domain assigned to the storage
 * account. Name is the CNAME source. Only one custom domain is supported per
 * storage account at this time. To clear the existing custom domain, use an
 * empty string for the custom domain name property.
 * @property {string} [customDomain.name] Gets or sets the custom domain name.
 * Name is the CNAME source.
 * @property {boolean} [customDomain.useSubDomain] Indicates whether indirect
 * CName validation is enabled. Default value is false. This should only be set
 * on updates
 */
export interface StorageAccountUpdateParameters extends Resource {
  accountType?: string;
  customDomain?: CustomDomain;
}

/**
 * @class
 * Initializes a new instance of the StorageAccountRegenerateKeyParameters class.
 * @constructor
 * @property {string} [keyName] Possible values include: 'key1', 'key2'
 */
export interface StorageAccountRegenerateKeyParameters {
  keyName?: string;
}

/**
 * @class
 * Initializes a new instance of the UsageName class.
 * @constructor
 * The Usage Names.
 *
 * @property {string} [value] Gets a string describing the resource name.
 * @property {string} [localizedValue] Gets a localized string describing the
 * resource name.
 */
export interface UsageName {
  value?: string;
  localizedValue?: string;
}

/**
 * @class
 * Initializes a new instance of the Usage class.
 * @constructor
 * Describes Storage Resource Usage.
 *
 * @property {string} [unit] Gets the unit of measurement. Possible values
 * include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountsPerSecond',
 * 'BytesPerSecond'
 * @property {number} [currentValue] Gets the current count of the allocated
 * resources in the subscription.
 * @property {number} [limit] Gets the maximum count of the resources that can
 * be allocated in the subscription.
 * @property {object} [name] Gets the name of the type of usage.
 * @property {string} [name.value] Gets a string describing the resource name.
 * @property {string} [name.localizedValue] Gets a localized string describing
 * the resource name.
 */
export interface Usage {
  unit?: string;
  currentValue?: number;
  limit?: number;
  name?: UsageName;
}

/**
 * @class
 * Initializes a new instance of the UsageListResult class.
 * @constructor
 * The List Usages operation response.
 *
 * @property {array} [value] Gets or sets the list Storage Resource Usages.
 */
export interface UsageListResult {
  value?: Usage[];
}

/**
 * @class
 * Initializes a new instance of the SubResource class.
 * @constructor
 * @property {string} [id] Resource Id
 */
export interface SubResource extends BaseResource {
  id?: string;
}


/**
 * @class
 * Initializes a new instance of the StorageAccountListResult class.
 * @constructor
 * The list storage accounts operation response.
 *
 * @property {string} [nextLink] Gets the link to the next set of results.
 * Currently this will always be empty as the API does not support pagination.
 */
export interface StorageAccountListResult extends Array<StorageAccount> {
  nextLink?: string;
}
